{"version":3,"sources":["img/unknown.jpg","heroList.js","searchAPI.js","dataVis.js","curList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Hero","props","useState","heroSel","selHero","useEffect","update","listID","imgLnk","hero","require","className","style","backgroundColor","onClick","src","alt","title","width","height","name","HeroList","charList","map","char","index","key","sel","listUpdater","PromptMsg","msgType","msg","SearchAPI","prompt","setPrompt","queryList","setQuery","selList","Array","length","fill","onSubmit","e","preventDefault","heroName","charName","target","Name","value","replace","fetch","then","response","json","data","badHero","query","msgBad","msgSuc","results","forEach","biography","charDict","push","pwrStat","powerstats","image","url","catch","err","TypeError","message","type","placeholder","list","i","addChars","selListener","DataVis","wordWrap","minHeight","compList","margin","top","right","left","bottom","dataKey","textAnchor","scaleToFit","angle","interval","minTickGap","wrap","tickFormatter","val","tickLine","domain","offset","position","itemSorter","align","verticalAlign","iconType","iconSize","stackId","connectNulls","stroke","CurList","setComp","curList","rmvChars","intelligence","strength","speed","durability","power","combat","App","setDict","chars","dict","JSON","parse","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.3032d38d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unknown.ee7bd910.jpg\";","import React, {useState, useEffect} from \"react\"\r\n\r\n//when clicked, this component will appear in different visual effect and \r\n//update its grand-parent component, searchAPI or curList\r\nconst Hero = (props) => {\r\n\r\n    const [heroSel, selHero] = useState(false)\r\n    useEffect(() => {props.update(props.listID, heroSel)}) //update the state to its grand-parent\r\n\r\n    //if the hero does not have a online photo, use the local one\r\n    const imgLnk = (props.hero.imgLnk !== \"\")? props.hero.imgLnk : require(\"./img/unknown.jpg\")\r\n    return(\r\n        <div className={\"col-6 col-sm-4 col-md-3 col-lg-2 text-center p-2\"}\r\n             style={{backgroundColor: heroSel?\"#e1f0e9\":\"#f4f9f7\"}} \r\n             onClick={() => selHero(!heroSel)}\r\n        >\r\n            {heroSel?<span className=\"text-dark\">SELECTED</span>:<span className=\"text-secondary\">UNSELECTED</span>}\r\n            <br/>\r\n            <img className=\"rounded mx-auto\" src={imgLnk} alt={props.hero.title} width={\"100%\"} height={\"auto\"}/>\r\n            <br/>\r\n            {props.hero.name}\r\n        </div>\r\n    )\r\n}\r\n\r\n//to render multiple <Hero /> components\r\nconst HeroList = (props) => {\r\n    return props.charList.map( (char, index) => {\r\n        return <Hero hero={char} key={char.name} listID={index} update={(listID, sel) => props.listUpdater(listID, sel)}/>\r\n    })\r\n}\r\nexport default HeroList","import React, {useState} from \"react\"\r\nimport HeroList from \"./heroList\"\r\n\r\n// style corresponding to msgTypes: \r\n// std prompt: black\r\n// text-danger: red\r\n// text-success: green\r\nconst PromptMsg = (props) => <h6 className={props.msgType}>{props.msg}</h6>\r\n\r\nconst SearchAPI = (props) => {\r\n\r\n    // Hooker which updates prompt msg\r\n    const [prompt, setPrompt] = useState(\r\n        <PromptMsg msg=\"Search for your favorite super heros!\" msgType=\"\"/>)\r\n \r\n    // Hooker to store data fetched from API\r\n    const [queryList, setQuery] = useState([])\r\n\r\n    // Create a map to track selected heros\r\n    const selList = new Array(queryList.length).fill(false)\r\n\r\n    // Call SuperHero API to fetch data\r\n    const apiCall = (heroName) => {\r\n        \r\n        // Because I can't pass CORS check of Chrome, I use a proxy to send request.\r\n        // Sometimes the proxy is busy and slow down the whole webapp or even reject requests.\r\n        const proxySever = \"https://cors-anywhere.herokuapp.com/\"\r\n        // const proxySever = \"\" \r\n        fetch(`${proxySever}https://superheroapi.com/api/3023293161017339/search/${heroName}`\r\n        )\r\n        .then(response => {\r\n            // fetch data, use promise.\r\n            return response.json()\r\n        })\r\n        .then(data => {\r\n            // Work with JSON data here\r\n            let badHero = false //record if we filter some bad heros and prompt the user\r\n            let query = [] \r\n            let msgBad = \"Found a bad hero matching your search...but we only serve justice! \"\r\n            let msgSuc = \"Now add the heroes to your list!\"\r\n\r\n            //push data if get successful feedback\r\n            if(data.response === \"success\"){\r\n                data.results.forEach(hero => {\r\n                    //use hero name as the charDict's unique key at the App.js\r\n                    let name = hero.biography[\"full-name\"]?`${hero.name} (${hero.biography[\"full-name\"]})`:hero.name\r\n                    if(name in props.charDict){return} //skip if the hero is already in the list\r\n                    if(hero.biography[\"alignment\"] ===\"bad\"){\r\n                        badHero = true //change flag\r\n                        return\r\n                    }\r\n                    query.push({\r\n                        name: name,\r\n                        pwrStat: hero.powerstats,\r\n                        imgLnk: hero.image.url,\r\n                    })\r\n                });\r\n                \r\n                //set prompt msg\r\n                if(query.length!==0){\r\n                    setPrompt(\r\n                        <PromptMsg msg={badHero?msgBad+msgSuc:msgSuc} msgType=\"text-success\"/>\r\n                    )\r\n                }else{\r\n                    setPrompt(\r\n                        <PromptMsg msg={badHero?msgBad:\"The hero(s) is already in your list!\"} msgType=\"text-danger\"/>\r\n                    )\r\n                }\r\n                setQuery(query)\r\n\r\n            //Successfully connect the API but without a match\r\n            }else if(data.response === \"error\"){\r\n                setPrompt(<PromptMsg msg=\"No match for your search...please try another one.\" msgType=\"text-danger\"/>)\r\n\r\n            }\r\n        })\r\n        .catch(err => {\r\n        //Fail to connect to API, either because of the CORS issue and can't reach the proxy mediator \r\n            if(err instanceof TypeError && err.message === \"Failed to fetch\"){\r\n                setPrompt(\r\n                    <PromptMsg msg=\"The proxy server is not avalible now...please try it later!\" msgType=\"text-danger\"/>\r\n                )\r\n            }else{setPrompt(<PromptMsg msg=\"Unknow Error, not able to fetch data\" msgType=\"text-danger\"/>)}\r\n        })\r\n    }\r\n\r\n    //search eventHandler\r\n    const searchChars = (e) => {\r\n        setPrompt(<PromptMsg msg=\"Searching...waiting for reponse from the API server\" msgType=\"\"/>)\r\n        e.preventDefault()\r\n        let charName = e.target.Name.value\r\n        charName = charName.replace(/\\s/g, \"\") //Trim off whitespaces\r\n        if(charName === \"\"){\r\n            setPrompt(<PromptMsg msg=\"Sorry, the input can't be blank.\" msgType=\"text-danger\"/>)\r\n        }\r\n        else{apiCall(charName)} //call API to search\r\n    };\r\n\r\n    //Record the user's selection\r\n    const selListener = (listID, sel) => {\r\n        selList[listID] = sel\r\n    }\r\n\r\n    //Update selected heros to charDict. This will cause rerendering component curList.\r\n    const addChars = (e) =>{\r\n        let list = []\r\n        for (let i=0; i<selList.length; i++){\r\n            if (selList[i]) {list.push(queryList[i])}\r\n        }\r\n        if(list.length !== 0){\r\n            props.addChars(list)\r\n            setPrompt(<PromptMsg msg=\"The hero(s) has been added in your list.\" msgType=\"text-success\"/>)\r\n        }else if(queryList.length === 0){\r\n            setPrompt(<PromptMsg msg=\"Please search for a hero first!\" msgType=\"text-danger\"/>)\r\n\r\n        }else(\r\n            setPrompt(<PromptMsg msg=\"Don't forget to select someone!\" msgType=\"text-danger\"/>)\r\n        )\r\n    }\r\n    \r\n    return(\r\n        <div className=\"container-fluid mt-3\">\r\n            <div className=\"row\">\r\n                    \r\n                <div className=\"col\">\r\n                    <form className=\"form\" onSubmit = {searchChars}>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"Name\"\r\n                            placeholder=\"Input a hero's name!\"\r\n                        />                        \r\n                        <input type=\"submit\" value=\"Search\"/>\r\n                        <input type=\"button\" value=\"Add Hero\" onClick={addChars} />\r\n                    </form>                \r\n                </div>\r\n                <div className=\"col\">\r\n                    {prompt}\r\n                </div>\r\n            </div>\r\n            <div className=\"row mt-2\">\r\n                <HeroList charList={queryList} listUpdater={(listID, sel) => selListener(listID, sel)}/>\r\n            </div>        \r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default SearchAPI","import React from 'react'\r\nimport {ResponsiveContainer, AreaChart, Area, XAxis, YAxis, Tooltip, Label, Legend} from 'recharts'\r\n\r\n\r\nconst DataVis = (props) => {\r\n    return (\r\n        <div className=\"container-fluid\" style={{wordWrap: \"break-word\"}}>\r\n        {/* create responsive container which adjust the whole chart to current media */}\r\n        <ResponsiveContainer  minHeight=\"750px\">\r\n            \r\n            {/* setting margin and chartype */}\r\n            <AreaChart\r\n                data={props.compList}\r\n                margin={{top: 50, right: 20, left: 20, bottom: 50}}\r\n            >\r\n\r\n            <XAxis  dataKey=\"name\" \r\n                    type=\"category\" \r\n                    textAnchor=\"end\"\r\n                    scaleToFit={true}\r\n                    height={120}\r\n                    width={20}\r\n                    angle={-75}\r\n                    interval={0}\r\n                    minTickGap={10}\r\n                    wrap={true}\r\n                    tickFormatter={val => val.replace(/ \\((.*)/g,\"\")}\r\n            />\r\n\r\n            <YAxis tickLine={false} type=\"number\" domain={[0, 600]} > \r\n                <Label value=\"Overall Power\" offset={-5} position=\"insideLeft\" angle=\"-90\" />\r\n            </YAxis>\r\n\r\n            {/* change the order of data set*/}\r\n            <Tooltip itemSorter={() => -1} />\r\n            <Legend align=\"center\" verticalAlign=\"top\" iconType=\"circle\" height={40} iconSize={10} />\r\n\r\n            {/* plt dataset */}\r\n            <Area type=\"monotone\" dataKey=\"intelligence\" stackId=\"1\" connectNulls={true} stroke=\"#41bebc\" fill=\"#41bebc\" />\r\n            <Area type=\"monotone\" dataKey=\"strength\"     stackId=\"1\" connectNulls={true} stroke=\"#3884d8\" fill=\"#3884d8\" />\r\n            <Area type=\"monotone\" dataKey=\"speed\"        stackId=\"1\" connectNulls={true} stroke=\"#d9b026\" fill=\"#d9b026\" />\r\n            <Area type=\"monotone\" dataKey=\"durability\"   stackId=\"1\" connectNulls={true} stroke=\"#5ba45b\" fill=\"#5ba45b\" />\r\n            <Area type=\"monotone\" dataKey=\"power\"        stackId=\"1\" connectNulls={true} stroke=\"#dd2a22\" fill=\"#dd2a22\" />\r\n            <Area type=\"monotone\" dataKey=\"combat\"       stackId=\"1\" connectNulls={true} stroke=\"#873ec1\" fill=\"#873ec1\" />\r\n            </AreaChart>\r\n            \r\n        </ResponsiveContainer>\r\n        </div>\r\n    ) \r\n}\r\n  \r\nexport default DataVis","import React,{useState} from \"react\"\r\nimport HeroList from \"./heroList\"\r\nimport DataVis from \"./dataVis\"\r\n\r\n// style corresponding to msgTypes: \r\n// std prompt: black\r\n// text-danger: red\r\n// text-success: green\r\nconst PromptMsg = (props) => <h6 className={props.msgType}>{props.msg}</h6>\r\n\r\n//this component present the user's list of heros and pass data to visualizer\r\nconst CurList = (props) => {\r\n    \r\n    const [prompt, setPrompt] = useState(\r\n        <PromptMsg msg=\"Select heros to compare their PowerStats!\" msgType=\"stdPrmt\"/>)\r\n    \r\n    const [compList, setComp] = useState([])\r\n    const curList = []\r\n    for (let char in props.charDict){\r\n        curList.push({\r\n            name: char,\r\n            pwrStat: props.charDict[char].pwrStat,\r\n            imgLnk: props.charDict[char].imgLnk,\r\n        })\r\n    }\r\n    const selList = new Array(curList.length).fill(false) //default they are all unselected\r\n    \r\n    //update selected heros\r\n    const selListener = (listID, sel) => {\r\n        selList[listID] = sel\r\n    }\r\n\r\n    //update heros in the charDict and remove selected ones\r\n    const rmnChars = (e) =>{\r\n        let list = []\r\n        for (let i=0; i<selList.length; i++){\r\n            if (selList[i]) {list.push(curList[i])}\r\n        }\r\n        if(list.length !== 0){\r\n            props.rmvChars(list)\r\n            setPrompt(<PromptMsg msg=\"Hero(s) have been removed\" msgType=\"text-success\"/>)\r\n        }else(\r\n            setPrompt(<PromptMsg msg=\"Don't forget to select a hero!\" msgType=\"text-danger\"/>)\r\n        )  \r\n    }\r\n\r\n    //generate an array of data according to the user's selection and process them into a format for visualization\r\n    const compChars = (e) => {\r\n        let list = []\r\n        for (let i=0; i<selList.length; i++){\r\n            if (selList[i]) {\r\n                let char = curList[i]\r\n                list.push({\r\n                    name: char.name,\r\n                    intelligence:(char.pwrStat.intelligence!==\"null\") ? char.pwrStat.intelligence : 0,\r\n                    strength:    (char.pwrStat.strength!==\"null\")     ? char.pwrStat.strength : 0,\r\n                    speed:       (char.pwrStat.speed!==\"null\")        ? char.pwrStat.speed : 0,\r\n                    durability:  (char.pwrStat.durability!==\"null\")   ? char.pwrStat.durability : 0,\r\n                    power:       (char.pwrStat.power!==\"null\")        ? char.pwrStat.power : 0,\r\n                    combat:      (char.pwrStat.combat!==\"null\")       ? char.pwrStat.combat : 0\r\n                })\r\n            }\r\n        }\r\n        //prevent some edge cases\r\n        if(list.length !== 0){\r\n            setComp(list)\r\n            setPrompt(<PromptMsg msg=\"The comparison has been generated\" msgType=\"text-success\"/>)\r\n        }else(\r\n            setPrompt(<PromptMsg msg=\"Don't forget to select a hero!\" msgType=\"text-danger\"/>)\r\n        )      \r\n    }\r\n    \r\n    return(\r\n        <div className=\"container-fluid mt-5\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">  \r\n                    <input type=\"button\" value=\"Remove Hero\" onClick={rmnChars} />\r\n                    <input type=\"button\" value=\"Go Compare!\" onClick={compChars} />\r\n                    <br/>\r\n                    <br/>\r\n                    Current Heros:\r\n                </div>\r\n                <div className=\"col\">\r\n                    {prompt}\r\n                </div>\r\n            </div>\r\n            <div className=\"row mt-2\">\r\n                <HeroList charList={curList} listUpdater={(listID, sel) => selListener(listID, sel)}/>\r\n            </div>\r\n            <div className=\"row mt-2\">\r\n                <DataVis compList = {compList}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurList","import React, {useState} from 'react';\nimport SearchAPI from \"./searchAPI\"\nimport CurList from \"./curList\"\n\n// I prefer functinal components for its terse and elegant presentation\nconst App = () => {\n\n  //charDict centralizes user's hero list as a dictionary\n  //charDict will be synchronized to all the other components \n  const [charDict, setDict] = useState({})\n  \n  //pass this function to API searcher to update \n  const addChars = (chars) => {\n    let dict = {}\n    chars.forEach(char => {\n        dict[char.name] = {\n          pwrStat: char.pwrStat,\n          imgLnk: char.imgLnk,\n        }\n    })\n    setDict({...charDict, ...dict})\n  }\n\n  //pass this function to child component \"heroList\" to remove heros and render the chart\n  const rmvChars = (chars) => {\n    let dict = JSON.parse(JSON.stringify(charDict)) //clone the existent charDict\n    chars.forEach(char => {delete dict[char.name]})\n    setDict(dict)\n  }\n\n  //use Bootstrap library to reach responsive design\n  //the two main components are SearchAPI and CurList\n  return (\n    <div className=\"container bg-light py-3\">\n      <div className=\"row\">\n        <div className=\"col-10 mx-auto\">\n          <h4 className=\"display-4 my-3\">Super Hero Search Engine</h4>\n          <h5 className=\"mt-2\">Find your favorite hero(s) and compare their power with other heros</h5>\n          <p className=\"lead\">\n          1. Input a hero's name in the search bar and then hit search button<br/>\n          2. Add the hero(s) in your list. (We only serve justice, so bad heros are out.<br/>\n          3. Select heros in your list and customize a powerStat comparison for them!\n          </p>\n          <SearchAPI addChars = {(chars) => addChars(chars)} charDict = {charDict}/>\n          <CurList rmvChars = {(chars) => rmvChars(chars)} charDict = {charDict} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}