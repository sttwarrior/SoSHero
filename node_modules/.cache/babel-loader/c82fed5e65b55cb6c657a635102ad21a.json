{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Front-End/projects/sosHero/soshero/src/curList.js\";\nimport React, { useState } from \"react\";\nimport HeroList from \"./heroList\";\nimport DataVis from \"./dataVis\"; // style corresponding to msgTypes: \n// std prompt: black\n// text-danger: red\n// text-success: green\n\nconst PromptMsg = props => React.createElement(\"h6\", {\n  className: props.msgType,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}, props.msg); //this component present the user's list of heros and pass data to visualizer\n\n\nconst CurList = props => {\n  const [prompt, setPrompt] = useState(React.createElement(PromptMsg, {\n    msg: \"Select heros to compare their PowerStats!\",\n    msgType: \"stdPrmt\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }));\n  const [compList, setComp] = useState([]);\n  const curList = [];\n\n  for (let char in props.charDict) {\n    curList.push({\n      name: char,\n      pwrStat: props.charDict[char].pwrStat,\n      imgLnk: props.charDict[char].imgLnk\n    });\n  }\n\n  const selList = new Array(curList.length).fill(false); //default they are all unselected\n  //update selected heros\n\n  const selListener = (listID, sel) => {\n    selList[listID] = sel;\n  }; //update heros in the charDict and remove selected ones\n\n\n  const rmnChars = e => {\n    let list = [];\n\n    for (let i = 0; i < selList.length; i++) {\n      if (selList[i]) {\n        list.push(curList[i]);\n      }\n    }\n\n    if (list.length !== 0) {\n      props.rmvChars(list);\n      setPrompt(React.createElement(PromptMsg, {\n        msg: \"Hero(s) have been removed\",\n        msgType: \"text-success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }));\n    } else setPrompt(React.createElement(PromptMsg, {\n      msg: \"Don't forget to select a hero!\",\n      msgType: \"text-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }));\n  }; //generate an array of data according to the user's selection and process them into a format for visualization\n\n\n  const compChars = e => {\n    let list = [];\n\n    for (let i = 0; i < selList.length; i++) {\n      if (selList[i]) {\n        let char = curList[i];\n        list.push({\n          name: char.name,\n          intelligence: char.pwrStat.intelligence !== \"null\" ? char.pwrStat.intelligence : 0,\n          strength: char.pwrStat.strength !== \"null\" ? char.pwrStat.strength : 0,\n          speed: char.pwrStat.speed !== \"null\" ? char.pwrStat.speed : 0,\n          durability: char.pwrStat.durability !== \"null\" ? char.pwrStat.durability : 0,\n          power: char.pwrStat.power !== \"null\" ? char.pwrStat.power : 0,\n          combat: char.pwrStat.combat !== \"null\" ? char.pwrStat.combat : 0\n        });\n      }\n    } //prevent some edge cases\n\n\n    if (list.length !== 0) {\n      setComp(list);\n      setPrompt(React.createElement(PromptMsg, {\n        msg: \"The comparison has been generated\",\n        msgType: \"text-success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }));\n    } else setPrompt(React.createElement(PromptMsg, {\n      msg: \"Don't forget to select a hero!\",\n      msgType: \"text-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"container-fluid mt-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Remove Hero\",\n    onClick: rmnChars,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Go Compare!\",\n    onClick: compChars,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), \"Current Heros:\"), React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, prompt)), React.createElement(\"div\", {\n    className: \"row mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(HeroList, {\n    charList: curList,\n    listUpdater: (listID, sel) => selListener(listID, sel),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"row mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(DataVis, {\n    compList: compList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })));\n};\n\nexport default CurList;","map":{"version":3,"sources":["/mnt/c/Front-End/projects/sosHero/soshero/src/curList.js"],"names":["React","useState","HeroList","DataVis","PromptMsg","props","msgType","msg","CurList","prompt","setPrompt","compList","setComp","curList","char","charDict","push","name","pwrStat","imgLnk","selList","Array","length","fill","selListener","listID","sel","rmnChars","e","list","i","rmvChars","compChars","intelligence","strength","speed","durability","power","combat"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAI,EAAA,SAAS,EAAEA,KAAK,CAACC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA+BD,KAAK,CAACE,GAArC,CAA7B,C,CAEA;;;AACA,MAAMC,OAAO,GAAIH,KAAD,IAAW;AAEvB,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAChC,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAC,2CAAf;AAA2D,IAAA,OAAO,EAAC,SAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgC,CAApC;AAGA,QAAM,CAACU,QAAD,EAAWC,OAAX,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMY,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIC,IAAT,IAAiBT,KAAK,CAACU,QAAvB,EAAgC;AAC5BF,IAAAA,OAAO,CAACG,IAAR,CAAa;AACTC,MAAAA,IAAI,EAAEH,IADG;AAETI,MAAAA,OAAO,EAAEb,KAAK,CAACU,QAAN,CAAeD,IAAf,EAAqBI,OAFrB;AAGTC,MAAAA,MAAM,EAAEd,KAAK,CAACU,QAAN,CAAeD,IAAf,EAAqBK;AAHpB,KAAb;AAKH;;AACD,QAAMC,OAAO,GAAG,IAAIC,KAAJ,CAAUR,OAAO,CAACS,MAAlB,EAA0BC,IAA1B,CAA+B,KAA/B,CAAhB,CAduB,CAc+B;AAEtD;;AACA,QAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACjCN,IAAAA,OAAO,CAACK,MAAD,CAAP,GAAkBC,GAAlB;AACH,GAFD,CAjBuB,CAqBvB;;;AACA,QAAMC,QAAQ,GAAIC,CAAD,IAAM;AACnB,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACV,OAAO,CAACE,MAAxB,EAAgCQ,CAAC,EAAjC,EAAoC;AAChC,UAAIV,OAAO,CAACU,CAAD,CAAX,EAAgB;AAACD,QAAAA,IAAI,CAACb,IAAL,CAAUH,OAAO,CAACiB,CAAD,CAAjB;AAAsB;AAC1C;;AACD,QAAGD,IAAI,CAACP,MAAL,KAAgB,CAAnB,EAAqB;AACjBjB,MAAAA,KAAK,CAAC0B,QAAN,CAAeF,IAAf;AACAnB,MAAAA,SAAS,CAAC,oBAAC,SAAD;AAAW,QAAA,GAAG,EAAC,2BAAf;AAA2C,QAAA,OAAO,EAAC,cAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAT;AACH,KAHD,MAIIA,SAAS,CAAC,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAC,gCAAf;AAAgD,MAAA,OAAO,EAAC,aAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAD,CADR;AAGR,GAXD,CAtBuB,CAmCvB;;;AACA,QAAMsB,SAAS,GAAIJ,CAAD,IAAO;AACrB,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACV,OAAO,CAACE,MAAxB,EAAgCQ,CAAC,EAAjC,EAAoC;AAChC,UAAIV,OAAO,CAACU,CAAD,CAAX,EAAgB;AACZ,YAAIhB,IAAI,GAAGD,OAAO,CAACiB,CAAD,CAAlB;AACAD,QAAAA,IAAI,CAACb,IAAL,CAAU;AACNC,UAAAA,IAAI,EAAEH,IAAI,CAACG,IADL;AAENgB,UAAAA,YAAY,EAAEnB,IAAI,CAACI,OAAL,CAAae,YAAb,KAA4B,MAA7B,GAAuCnB,IAAI,CAACI,OAAL,CAAae,YAApD,GAAmE,CAF1E;AAGNC,UAAAA,QAAQ,EAAMpB,IAAI,CAACI,OAAL,CAAagB,QAAb,KAAwB,MAAzB,GAAuCpB,IAAI,CAACI,OAAL,CAAagB,QAApD,GAA+D,CAHtE;AAINC,UAAAA,KAAK,EAASrB,IAAI,CAACI,OAAL,CAAaiB,KAAb,KAAqB,MAAtB,GAAuCrB,IAAI,CAACI,OAAL,CAAaiB,KAApD,GAA4D,CAJnE;AAKNC,UAAAA,UAAU,EAAItB,IAAI,CAACI,OAAL,CAAakB,UAAb,KAA0B,MAA3B,GAAuCtB,IAAI,CAACI,OAAL,CAAakB,UAApD,GAAiE,CALxE;AAMNC,UAAAA,KAAK,EAASvB,IAAI,CAACI,OAAL,CAAamB,KAAb,KAAqB,MAAtB,GAAuCvB,IAAI,CAACI,OAAL,CAAamB,KAApD,GAA4D,CANnE;AAONC,UAAAA,MAAM,EAAQxB,IAAI,CAACI,OAAL,CAAaoB,MAAb,KAAsB,MAAvB,GAAuCxB,IAAI,CAACI,OAAL,CAAaoB,MAApD,GAA6D;AAPpE,SAAV;AASH;AACJ,KAfoB,CAgBrB;;;AACA,QAAGT,IAAI,CAACP,MAAL,KAAgB,CAAnB,EAAqB;AACjBV,MAAAA,OAAO,CAACiB,IAAD,CAAP;AACAnB,MAAAA,SAAS,CAAC,oBAAC,SAAD;AAAW,QAAA,GAAG,EAAC,mCAAf;AAAmD,QAAA,OAAO,EAAC,cAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAT;AACH,KAHD,MAIIA,SAAS,CAAC,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAC,gCAAf;AAAgD,MAAA,OAAO,EAAC,aAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAD,CADR;AAGR,GAvBD;;AAyBA,SACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,aAA3B;AAAyC,IAAA,OAAO,EAAEiB,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,aAA3B;AAAyC,IAAA,OAAO,EAAEK,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,mBADJ,EAQI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKvB,MADL,CARJ,CADJ,EAaI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEI,OAApB;AAA6B,IAAA,WAAW,EAAE,CAACY,MAAD,EAASC,GAAT,KAAiBF,WAAW,CAACC,MAAD,EAASC,GAAT,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAbJ,EAgBI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAIf,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAhBJ,CADJ;AAsBH,CAnFD;;AAqFA,eAAeH,OAAf","sourcesContent":["import React,{useState} from \"react\"\r\nimport HeroList from \"./heroList\"\r\nimport DataVis from \"./dataVis\"\r\n\r\n// style corresponding to msgTypes: \r\n// std prompt: black\r\n// text-danger: red\r\n// text-success: green\r\nconst PromptMsg = (props) => <h6 className={props.msgType}>{props.msg}</h6>\r\n\r\n//this component present the user's list of heros and pass data to visualizer\r\nconst CurList = (props) => {\r\n    \r\n    const [prompt, setPrompt] = useState(\r\n        <PromptMsg msg=\"Select heros to compare their PowerStats!\" msgType=\"stdPrmt\"/>)\r\n    \r\n    const [compList, setComp] = useState([])\r\n    const curList = []\r\n    for (let char in props.charDict){\r\n        curList.push({\r\n            name: char,\r\n            pwrStat: props.charDict[char].pwrStat,\r\n            imgLnk: props.charDict[char].imgLnk,\r\n        })\r\n    }\r\n    const selList = new Array(curList.length).fill(false) //default they are all unselected\r\n    \r\n    //update selected heros\r\n    const selListener = (listID, sel) => {\r\n        selList[listID] = sel\r\n    }\r\n\r\n    //update heros in the charDict and remove selected ones\r\n    const rmnChars = (e) =>{\r\n        let list = []\r\n        for (let i=0; i<selList.length; i++){\r\n            if (selList[i]) {list.push(curList[i])}\r\n        }\r\n        if(list.length !== 0){\r\n            props.rmvChars(list)\r\n            setPrompt(<PromptMsg msg=\"Hero(s) have been removed\" msgType=\"text-success\"/>)\r\n        }else(\r\n            setPrompt(<PromptMsg msg=\"Don't forget to select a hero!\" msgType=\"text-danger\"/>)\r\n        )  \r\n    }\r\n\r\n    //generate an array of data according to the user's selection and process them into a format for visualization\r\n    const compChars = (e) => {\r\n        let list = []\r\n        for (let i=0; i<selList.length; i++){\r\n            if (selList[i]) {\r\n                let char = curList[i]\r\n                list.push({\r\n                    name: char.name,\r\n                    intelligence:(char.pwrStat.intelligence!==\"null\") ? char.pwrStat.intelligence : 0,\r\n                    strength:    (char.pwrStat.strength!==\"null\")     ? char.pwrStat.strength : 0,\r\n                    speed:       (char.pwrStat.speed!==\"null\")        ? char.pwrStat.speed : 0,\r\n                    durability:  (char.pwrStat.durability!==\"null\")   ? char.pwrStat.durability : 0,\r\n                    power:       (char.pwrStat.power!==\"null\")        ? char.pwrStat.power : 0,\r\n                    combat:      (char.pwrStat.combat!==\"null\")       ? char.pwrStat.combat : 0\r\n                })\r\n            }\r\n        }\r\n        //prevent some edge cases\r\n        if(list.length !== 0){\r\n            setComp(list)\r\n            setPrompt(<PromptMsg msg=\"The comparison has been generated\" msgType=\"text-success\"/>)\r\n        }else(\r\n            setPrompt(<PromptMsg msg=\"Don't forget to select a hero!\" msgType=\"text-danger\"/>)\r\n        )      \r\n    }\r\n    \r\n    return(\r\n        <div className=\"container-fluid mt-5\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">  \r\n                    <input type=\"button\" value=\"Remove Hero\" onClick={rmnChars} />\r\n                    <input type=\"button\" value=\"Go Compare!\" onClick={compChars} />\r\n                    <br/>\r\n                    <br/>\r\n                    Current Heros:\r\n                </div>\r\n                <div className=\"col\">\r\n                    {prompt}\r\n                </div>\r\n            </div>\r\n            <div className=\"row mt-2\">\r\n                <HeroList charList={curList} listUpdater={(listID, sel) => selListener(listID, sel)}/>\r\n            </div>\r\n            <div className=\"row mt-2\">\r\n                <DataVis compList = {compList}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurList"]},"metadata":{},"sourceType":"module"}