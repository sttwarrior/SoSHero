{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Front-End/projects/sosHero/soshero/src/searchAPI.js\";\nimport React, { useState } from \"react\";\nimport HeroList from \"./heroList\"; // style corresponding to msgTypes: \n// std prompt: black\n// text-danger: red\n// text-success: green\n\nconst PromptMsg = props => React.createElement(\"h6\", {\n  className: props.msgType,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}, props.msg);\n\nconst SearchAPI = props => {\n  // Hooker which updates prompt msg\n  const [prompt, setPrompt] = useState(React.createElement(PromptMsg, {\n    msg: \"Search for your favorite super heros!\",\n    msgType: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  })); // Hooker to store data fetched from API\n\n  const [queryList, setQuery] = useState([]); // Create a map to track selected heros\n\n  const selList = new Array(queryList.length).fill(false); // Call SuperHero API to fetch data\n\n  const apiCall = heroName => {\n    // Because I can't pass CORS check of Chrome, I use a proxy to send request.\n    // Sometimes the proxy is busy and slow down the whole webapp or even reject requests.\n    const proxySever = \"https://cors-anywhere.herokuapp.com/\"; // const proxySever = \"\" \n\n    fetch(`${proxySever}https://superheroapi.com/api/3023293161017339/search/${heroName}`).then(response => {\n      // fetch data, use promise.\n      return response.json();\n    }).then(data => {\n      // Work with JSON data here\n      let badHero = false; //record if we filter some bad heros and prompt the user\n\n      let query = [];\n      let msgBad = \"Found a bad hero matching your search...but we only serve justice! \";\n      let msgSuc = \"Now add the heroes to your list!\"; //push data if get successful feedback\n\n      if (data.response === \"success\") {\n        data.results.forEach(hero => {\n          //use hero name as the charDict's unique key at the App.js\n          let name = hero.biography[\"full-name\"] ? `${hero.name} (${hero.biography[\"full-name\"]})` : hero.name;\n\n          if (name in props.charDict) {\n            return;\n          } //skip if the hero is already in the list\n\n\n          if (hero.biography[\"alignment\"] === \"bad\") {\n            badHero = true; //change flag\n\n            return;\n          }\n\n          query.push({\n            name: name,\n            pwrStat: hero.powerstats,\n            imgLnk: hero.image.url\n          });\n        }); //set prompt msg\n\n        if (query.length !== 0) {\n          setPrompt(React.createElement(PromptMsg, {\n            msg: badHero ? msgBad + msgSuc : msgSuc,\n            msgType: \"text-success\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }));\n        } else {\n          setPrompt(React.createElement(PromptMsg, {\n            msg: badHero ? msgBad : \"The hero(s) is already in your list!\",\n            msgType: \"text-danger\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }));\n        }\n\n        setQuery(query); //Successfully connect the API but without a match\n      } else if (data.response === \"error\") {\n        setPrompt(React.createElement(PromptMsg, {\n          msg: \"No match for your search...please try another one.\",\n          msgType: \"text-danger\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }));\n      }\n    }).catch(err => {\n      //Fail to connect to API, either because of the CORS issue and can't reach the proxy mediator \n      if (err instanceof TypeError && err.message === \"Failed to fetch\") {\n        setPrompt(React.createElement(PromptMsg, {\n          msg: \"The proxy server is not avalible now...please try it later!\",\n          msgType: \"text-danger\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }));\n      } else {\n        setPrompt(React.createElement(PromptMsg, {\n          msg: \"Unknow Error, not able to fetch data\",\n          msgType: \"text-danger\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }));\n      }\n    });\n  }; //search eventHandler\n\n\n  const searchChars = e => {\n    setPrompt(React.createElement(PromptMsg, {\n      msg: \"Searching...waiting for reponse from the API server\",\n      msgType: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n    e.preventDefault();\n    let charName = e.target.Name.value;\n    charName = charName.replace(/\\s/g, \"\"); //Trim off whitespaces\n\n    if (charName === \"\") {\n      setPrompt(React.createElement(PromptMsg, {\n        msg: \"Sorry, the input can't be blank.\",\n        msgType: \"text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }));\n    } else {\n      apiCall(charName);\n    } //call API to search\n\n  }; //Record the user's selection\n\n\n  const selListener = (listID, sel) => {\n    selList[listID] = sel;\n  }; //Update selected heros to charDict. This will cause rerendering component curList.\n\n\n  const addChars = e => {\n    let list = [];\n\n    for (let i = 0; i < selList.length; i++) {\n      if (selList[i]) {\n        list.push(queryList[i]);\n      }\n    }\n\n    if (list.length !== 0) {\n      props.addChars(list);\n      setPrompt(React.createElement(PromptMsg, {\n        msg: \"The hero(s) has been added in your list.\",\n        msgType: \"text-success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }));\n    } else if (queryList.length === 0) {\n      setPrompt(React.createElement(PromptMsg, {\n        msg: \"Please search for a hero first!\",\n        msgType: \"text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }));\n    } else setPrompt(React.createElement(PromptMsg, {\n      msg: \"Don't forget to select someone!\",\n      msgType: \"text-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"container-fluid mt-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: searchChars,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"Name\",\n    placeholder: \"Input a hero's name!\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Add Hero\",\n    onClick: addChars,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, prompt)), React.createElement(\"div\", {\n    className: \"row mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(HeroList, {\n    charList: queryList,\n    listUpdater: (listID, sel) => selListener(listID, sel),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  })));\n};\n\nexport default SearchAPI;","map":{"version":3,"sources":["/mnt/c/Front-End/projects/sosHero/soshero/src/searchAPI.js"],"names":["React","useState","HeroList","PromptMsg","props","msgType","msg","SearchAPI","prompt","setPrompt","queryList","setQuery","selList","Array","length","fill","apiCall","heroName","proxySever","fetch","then","response","json","data","badHero","query","msgBad","msgSuc","results","forEach","hero","name","biography","charDict","push","pwrStat","powerstats","imgLnk","image","url","catch","err","TypeError","message","searchChars","e","preventDefault","charName","target","Name","value","replace","selListener","listID","sel","addChars","list","i"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\r\nimport HeroList from \"./heroList\"\r\n\r\n// style corresponding to msgTypes: \r\n// std prompt: black\r\n// text-danger: red\r\n// text-success: green\r\nconst PromptMsg = (props) => <h6 className={props.msgType}>{props.msg}</h6>\r\n\r\nconst SearchAPI = (props) => {\r\n\r\n    // Hooker which updates prompt msg\r\n    const [prompt, setPrompt] = useState(\r\n        <PromptMsg msg=\"Search for your favorite super heros!\" msgType=\"\"/>)\r\n \r\n    // Hooker to store data fetched from API\r\n    const [queryList, setQuery] = useState([])\r\n\r\n    // Create a map to track selected heros\r\n    const selList = new Array(queryList.length).fill(false)\r\n\r\n    // Call SuperHero API to fetch data\r\n    const apiCall = (heroName) => {\r\n        \r\n        // Because I can't pass CORS check of Chrome, I use a proxy to send request.\r\n        // Sometimes the proxy is busy and slow down the whole webapp or even reject requests.\r\n        const proxySever = \"https://cors-anywhere.herokuapp.com/\"\r\n        // const proxySever = \"\" \r\n        fetch(`${proxySever}https://superheroapi.com/api/3023293161017339/search/${heroName}`\r\n        )\r\n        .then(response => {\r\n            // fetch data, use promise.\r\n            return response.json()\r\n        })\r\n        .then(data => {\r\n            // Work with JSON data here\r\n            let badHero = false //record if we filter some bad heros and prompt the user\r\n            let query = [] \r\n            let msgBad = \"Found a bad hero matching your search...but we only serve justice! \"\r\n            let msgSuc = \"Now add the heroes to your list!\"\r\n\r\n            //push data if get successful feedback\r\n            if(data.response === \"success\"){\r\n                data.results.forEach(hero => {\r\n                    //use hero name as the charDict's unique key at the App.js\r\n                    let name = hero.biography[\"full-name\"]?`${hero.name} (${hero.biography[\"full-name\"]})`:hero.name\r\n                    if(name in props.charDict){return} //skip if the hero is already in the list\r\n                    if(hero.biography[\"alignment\"] ===\"bad\"){\r\n                        badHero = true //change flag\r\n                        return\r\n                    }\r\n                    query.push({\r\n                        name: name,\r\n                        pwrStat: hero.powerstats,\r\n                        imgLnk: hero.image.url,\r\n                    })\r\n                });\r\n                \r\n                //set prompt msg\r\n                if(query.length!==0){\r\n                    setPrompt(\r\n                        <PromptMsg msg={badHero?msgBad+msgSuc:msgSuc} msgType=\"text-success\"/>\r\n                    )\r\n                }else{\r\n                    setPrompt(\r\n                        <PromptMsg msg={badHero?msgBad:\"The hero(s) is already in your list!\"} msgType=\"text-danger\"/>\r\n                    )\r\n                }\r\n                setQuery(query)\r\n\r\n            //Successfully connect the API but without a match\r\n            }else if(data.response === \"error\"){\r\n                setPrompt(<PromptMsg msg=\"No match for your search...please try another one.\" msgType=\"text-danger\"/>)\r\n\r\n            }\r\n        })\r\n        .catch(err => {\r\n        //Fail to connect to API, either because of the CORS issue and can't reach the proxy mediator \r\n            if(err instanceof TypeError && err.message === \"Failed to fetch\"){\r\n                setPrompt(\r\n                    <PromptMsg msg=\"The proxy server is not avalible now...please try it later!\" msgType=\"text-danger\"/>\r\n                )\r\n            }else{setPrompt(<PromptMsg msg=\"Unknow Error, not able to fetch data\" msgType=\"text-danger\"/>)}\r\n        })\r\n    }\r\n\r\n    //search eventHandler\r\n    const searchChars = (e) => {\r\n        setPrompt(<PromptMsg msg=\"Searching...waiting for reponse from the API server\" msgType=\"\"/>)\r\n        e.preventDefault()\r\n        let charName = e.target.Name.value\r\n        charName = charName.replace(/\\s/g, \"\") //Trim off whitespaces\r\n        if(charName === \"\"){\r\n            setPrompt(<PromptMsg msg=\"Sorry, the input can't be blank.\" msgType=\"text-danger\"/>)\r\n        }\r\n        else{apiCall(charName)} //call API to search\r\n    };\r\n\r\n    //Record the user's selection\r\n    const selListener = (listID, sel) => {\r\n        selList[listID] = sel\r\n    }\r\n\r\n    //Update selected heros to charDict. This will cause rerendering component curList.\r\n    const addChars = (e) =>{\r\n        let list = []\r\n        for (let i=0; i<selList.length; i++){\r\n            if (selList[i]) {list.push(queryList[i])}\r\n        }\r\n        if(list.length !== 0){\r\n            props.addChars(list)\r\n            setPrompt(<PromptMsg msg=\"The hero(s) has been added in your list.\" msgType=\"text-success\"/>)\r\n        }else if(queryList.length === 0){\r\n            setPrompt(<PromptMsg msg=\"Please search for a hero first!\" msgType=\"text-danger\"/>)\r\n\r\n        }else(\r\n            setPrompt(<PromptMsg msg=\"Don't forget to select someone!\" msgType=\"text-danger\"/>)\r\n        )\r\n    }\r\n    \r\n    return(\r\n        <div className=\"container-fluid mt-3\">\r\n            <div className=\"row\">\r\n                    \r\n                <div className=\"col\">\r\n                    <form className=\"form\" onSubmit = {searchChars}>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"Name\"\r\n                            placeholder=\"Input a hero's name!\"\r\n                        />                        \r\n                        <input type=\"submit\" value=\"Search\"/>\r\n                        <input type=\"button\" value=\"Add Hero\" onClick={addChars} />\r\n                    </form>                \r\n                </div>\r\n                <div className=\"col\">\r\n                    {prompt}\r\n                </div>\r\n            </div>\r\n            <div className=\"row mt-2\">\r\n                <HeroList charList={queryList} listUpdater={(listID, sel) => selListener(listID, sel)}/>\r\n            </div>        \r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default SearchAPI"]},"metadata":{},"sourceType":"module"}